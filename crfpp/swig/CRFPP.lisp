;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.38
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

;;; Lisp parse tree produced by SWIG
(top :outfile "CRFPP.lisp" :name "CRFPP" :module #1=(module :name "CRFPP")
   :inputfile "CRFPP.i" :classes #2=()
   :infile "CRFPP.i" :outfile-h "CRFPP_wrap.h"
  :children ((include :name "/usr/local/share/swig/1.3.38//swig.swg"
      :children ((include :name "/usr/local/share/swig/1.3.38//swigwarnings.swg"
          :children ((include :name "/usr/local/share/swig/1.3.38//swigwarn.swg")))
        (typemap :code "free($1);" :method "newfree"
          :children ((typemapitem :pattern #3=((:type "p.char")))))
        (typemap :code "{
  if ($1) free((char *)$1);
  if ($input) {
     $1 = ($1_type) malloc(strlen((const char *)$input)+1);
     strcpy((char *)$1, (const char *)$input);
  } else {
     $1 = 0;
  }
}" :method "memberin"
          :children ((typemapitem :pattern #4=((:type "p.char")))))
        (typemap :kwargs #5=((:name "warning" :value "451:Setting a const char * variable may leak memory."))
           :code "{
  if ($input) {
     $1 = ($1_type) malloc(strlen((const char *)$input)+1);
     strcpy((char *)$1, (const char *)$input);
  } else {
     $1 = 0;
  }
}" :method "memberin"
          :children ((typemapitem :pattern #6=((:type "p.q(const).char")))))
        (typemap :code "{
  if ($1) free((char *)$1);
  if ($input) {
     $1 = ($1_type) malloc(strlen((const char *)$input)+1);
     strcpy((char *)$1, (const char *)$input);
  } else {
     $1 = 0;
  }
}" :method "globalin"
          :children ((typemapitem :pattern #7=((:type "p.char")))))
        (typemap :kwargs #8=((:name "warning" :value "451:Setting a const char * variable may leak memory."))
           :code "{
  if ($input) {
     $1 = ($1_type) malloc(strlen((const char *)$input)+1);
     strcpy((char *)$1, (const char *)$input);
  } else {
     $1 = 0;
  }
}" :method "globalin"
          :children ((typemapitem :pattern #9=((:type "p.q(const).char")))))
        (typemap :code "{
  if($input) {
    strncpy((char*)$1, (const char *)$input, $1_dim0-1);
    $1[$1_dim0-1] = 0;
  } else {
    $1[0] = 0;
  }
}" :method "memberin"
          :children ((typemapitem :pattern #10=((:type "a(ANY).char")))))
        (typemap :code "{
  if($input) {
    strncpy((char*)$1, (const char *)$input, $1_dim0-1);
    $1[$1_dim0-1] = 0;
  } else {
    $1[0] = 0;
  }
}" :method "globalin"
          :children ((typemapitem :pattern #11=((:type "a(ANY).char")))))
        (typemap :code "{
  if ($input) strcpy((char *)$1, (const char *)$input);
  else $1[0] = 0;
}" :method "memberin"
          :children ((typemapitem :pattern #12=((:type "a().char")))))
        (typemap :code "{
  if ($input) strcpy((char *)$1, (const char *)$input);
  else $1[0] = 0;
}" :method "globalin"
          :children ((typemapitem :pattern #13=((:type "a().char")))))
        (typemap :code "{
  size_t ii;
  $1_basetype *b = ($1_basetype *) $1;
  for (ii = 0; ii < (size_t)$1_size; ii++) b[ii] = *(($1_basetype *) $input + ii);
}" :method "memberin"
          :children ((typemapitem :pattern #14=((:type "a(ANY).SWIGTYPE")))))
        (typemap :code "{
  size_t ii;
  $1_basetype *b = ($1_basetype *) $1;
  for (ii = 0; ii < (size_t)$1_size; ii++) b[ii] = *(($1_basetype *) $input + ii);
}" :method "globalin"
          :children ((typemapitem :pattern #15=((:type "a(ANY).SWIGTYPE")))))
        (typemap :code "{
  $basetype (*inp)[$dim1] = ($basetype (*)[$dim1])($input);
  $basetype (*dest)[$dim1] = ($basetype (*)[$dim1])($1);
  size_t ii = 0;
  for (; ii < $dim0; ++ii) {
    $basetype *ip = inp[ii];
    $basetype *dp = dest[ii];
    size_t jj = 0;
    for (; jj < $dim1; ++jj) dp[jj] = ip[jj];
  }
}" :method "memberin"
          :children ((typemapitem :pattern #16=((:type "a(ANY).a(ANY).SWIGTYPE")))))
        (typemap :code "{
  $basetype (*inp)[$dim1] = ($basetype (*)[$dim1])($input);
  $basetype (*dest)[$dim1] = ($basetype (*)[$dim1])($1);
  size_t ii = 0;
  for (; ii < $dim0; ++ii) {
    $basetype *ip = inp[ii];
    $basetype *dp = dest[ii];
    size_t jj = 0;
    for (; jj < $dim1; ++jj) dp[jj] = ip[jj];
  }
}" :method "globalin"
          :children ((typemapitem :pattern #17=((:type "a(ANY).a(ANY).SWIGTYPE")))))
        (typemap :kwargs #18=((:name "numinputs" :value "0"))
           :code "" :method "in"
          :children ((typemapitem :pattern #19=((:name "VARARGS_SENTINEL" :type "p.SWIGTYPE")))
            (typemapitem :pattern #20=((:name "VARARGS_SENTINEL" :type "SWIGTYPE")))))
        (insert :code "/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility(\"default\")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

" :section "runtime")))
    (include :name "CRFPP.i" :module "CRFPP" :options #21=(("maininput" . "CRFPP.i"))
      :children ((module :name "CRFPP")
        (include :name "/usr/local/share/swig/1.3.38//exception.i"
          :children ((insert :code "/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13


" :section "runtime")))
        (insert :code "
#include \"crfpp.h\"
")
        (insert :code "

void delete_CRFPP_Tagger (CRFPP::Tagger *t) {
  delete t;
  t = 0;
}

CRFPP::Tagger* new_CRFPP_Tagger (const char *arg) {
  CRFPP::Tagger *tagger = CRFPP::createTagger(arg);
  if (! tagger) throw CRFPP::getTaggerError();
  return tagger;
}

")
        (include :name "../crfpp.h")
        (include :name "version.h"
          :children ((cdecl :feature-except "0" :name "CRFPP" :sym-symtab #22=(symboltable :csymtab #23=(("CRFPP" . #24=(cdecl :feature-except "0" :name "CRFPP" :sym-symtab #22# :kind "variable" :sym-name "CRFPP" :view "variableWrapper" :decl "" :wrap-action "result = CRFPP;" :type "namespace" :code "{
%constant VERSION = \"0.52\";
}" :sym-overname "__SWIG_0")))
                 :symtab #25=(("CRFPP" . #24#))
                :children ((symboltable :name "CRFPP::Tagger" :csymtab #26=(("Tagger" . #27=(constructor :sym-name "Tagger" :name "Tagger" :parms #28=((:name "argc" :type "p.q(const).char" :compactdefargs "1"))
                           :decl "f(p.q(const).char)." :feature-new "1" :feature-except "{
  try { $action }
  catch (char *e) { SWIG_exception (SWIG_RuntimeError, e); }
  catch (const char *e) { SWIG_exception (SWIG_RuntimeError, (char*)e); }
}" :feature-extend "1" :sym-symtab #29=(symboltable :name "CRFPP::Tagger" :csymtab #26# :symtab #30=(("Tagger" . #27#)))
                           :sym-overname "__SWIG_0")))
                     :symtab #30#)))
               :kind "variable" :sym-name "CRFPP" :view "variableWrapper" :decl "" :wrap-action "result = CRFPP;" :type "namespace" :code "{
%constant VERSION = \"0.52\";
}" :sym-overname "__SWIG_0")))))))
